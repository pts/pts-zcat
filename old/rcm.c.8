/* rewritten by pts@fazekas.hu at Fri Jun 29 23:42:40 CEST 2001
 * Sat Jun 30 09:49:56 CEST 2001
 * Imp: unobfuscated [] handling
 * Imp: separate functions instead of B
 * Imp: for -> while
 * Imp: booleans in while
 *
 * Dat: no var `l' anymore
 * Dat: no var `O' anymore
 */

/* used library functions */
#define putcha putchar
#define getcha getchar
#define mallo  malloc
#define fre    free
#include <stdio.h> /* putchar(), getchar() */
#include <stdlib.h> /* malloc(), free() */

#undef NULL
#define NULL ((void*)0)

/* used integer types, except for main() */
#undef BYTE
#define BYTE unsigned char /* 8 bits */
#undef WORD
#define WORD unsigned short /* >=16 bits */
#undef DWORD
#define DWORD unsigned long /* >=32 bits */

/* Compiles with: gcc -ansi -pedantic -W -Wall -Wstrict-prototypes -Wtraditional -Wnested-externs -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wmissing-prototypes -Winline -Wmissing-declarations rcm.c */

/* boolean handling is like in Java: comparison and logical operators return a
 * boolean value, and if() tests only boolean, not int. (for tests int :-()
 */

/* function declarations */
int main(int argc, char **argv);
static WORD fv(WORD l, WORD O);

/* datatype declarations */
struct node {
  struct node *left, *right;
  WORD value;
};

/* constant arrays (lookup tables) */
const WORD constW[] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
const WORD constU[] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258};
const WORD constP[] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
const WORD constQ[] = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
const WORD constL[] = {0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};

/* global variables */
static WORD Y, C, T, Z[320], B[17], G[17];
static DWORD J;
static BYTE S[32768];
static struct node *V, *H, *I;

/** 
 * Allocates a new node and initializes it with empty content. This function
 * lets we get rid of the global variable F (which was buggily uninitialized
 * in the original scm.c).
 * @return pointer to the newly allocated node
 */
static struct node *fvNalloc(void) {
  static struct node empty={ NULL, NULL, 0 };
  struct node *n;
  n = mallo (sizeof (struct node));
  *n=empty;
  return n;
}

static WORD fv(WORD param, WORD whichcode) {
  if (whichcode==0) {
    WORD o, q;
    fv (24, 1);
    o = fv(8, 1);
    fv(24, 1);
    fv(24, 1);
    if (0!=(o & 4)) {
      for (q = fv(16, 1); q--; fv(8, 1)) ;
    }; 
    for (; o & 8 && fv(8, 1);) ;
    for (; o & 16 && fv(8, 1);) ;
    if (0!=(o & 2)) fv(16, 1);
    for (o = 0; !o;) {
      o = fv(1, 1);
      q = fv(2, 1);
      if (0!=q || 0!=fv(8, 7)) {
        if (0!=(q & 1)) fv(7, 8);
        if (0!=(q & 2)) fv(3, 9);
        fv(5, 6);
        I = V;
        fv(2, 4);
        I = H;
        fv(9, 4);
      }
    }
    for (; (C %= 32768) != (T %= 32768); putcha (C++[S]));
  } else if (whichcode == 6) {
    WORD oo, f;
    for (; (oo = fv(6, (I = V, 3))) != 256;) {
      if (oo > 256 || 0!=(fv(oo, 2), 0)) {
        oo -= 257;
	f = constU[oo] + fv(constP[oo], 1);
	I = H;
	oo = fv(5, 3);
	oo = constQ[oo] + fv(constL[oo], 1);
	oo = oo <= T ? T - oo : 32768 - oo + T;
	for (; f--; oo %= 32768) fv(S[oo++], 2);
      }
    }
  } else if (whichcode == 3) {
    for (; I->left; I = fv(1, 1) ? I->right : I->left);
    return I->value;
  } else if (whichcode == 5) {
    WORD oo, q;
    for (oo = 17; oo--; oo[B] = 0);
    for (oo++; oo < param; oo++[Z][B]++);
    for (*B = *G = oo = 0; oo < 16; oo++) {
      G[oo + 1] = (oo[G] + B[oo]) << 1;;
    }
    for (I = 0, oo = 0; oo < param; oo++) {
      if (0!=Z[oo]) {
        struct node **e;
        WORD o;
        e = (q = oo[Z][G], Z[oo][G]++, o = Z[oo], &I);
        for (;
             o-- && (*e || (*e=fvNalloc(), 1));
             e = ((q >> o) & 1) ? &(*e)->right : &(*e)->left
             );
        *e=fvNalloc();
        (*e)->value = oo;
      }
    }
  } else if (whichcode == 2) {
    T++[S] = param;
    if ((T %= 32768) == (C %= 32768)) putcha (C++[S]);
  } else if (whichcode == 8) {
    WORD oo;
    for (oo = 288; oo--; Z[oo] = oo < 144 ? 8 : oo < 256 ? 9 : oo < 280 ? 7 : 8);
    V = (fv(288, 5), I);
    for (oo = 32; oo--; Z[oo] = 5);
    H = (fv(32, 5), I);
  } else if (whichcode == 1) {
    WORD oo;
    if (0!=param) {
      /* vvv Dat: 0L means a long (>=32) bit long zero */
      for (; Y < param; Y += 8) J |= (0L + getcha ()) << Y;
      Y -= param;
      oo = J & ((1 << param) - 1);
      J >>= param;
      return oo;
    } else return 0;
  } else if (whichcode == 7) {
    WORD oo;
    if (0!=(Y % 8)) fv(Y % 8, 1);
    for (oo = fv(16, 1), fv(16, 1); oo--; fv(fv(8, 1), 2)) ;
  } else if (whichcode == 9) {
    WORD o, oo, ooo, f, q;
    WORD p = fv(5, 1) + 257, z = fv(5, 1) + 1, v = fv(4, 1) + 4;
    for (oo = 0; oo < v; oo++[constW][Z] = fv(3, 1));
    for (; 19 > oo; constW[oo++][Z] = 0);
    V = (fv(19, 5), I);
    for (ooo = oo = 0; oo < (p + z);) {
      I = V;
      o = fv(3, 3);
      f = o == 16
        ? (o = ooo), 3 + fv(2, 1) : o == 17 ?
        (o = 0), 3 + fv(3, 1) : o == 18 ? (o = 0),
        11 + fv(7, 1) : ((ooo = o), 1);
      for (q = f; q--; oo++[Z] = o);
    }
    I = V;
    fv(9, 4);
    V = (fv(p, 5), I);
    for (oo = z; oo--; Z[oo] = Z[oo + p]);
    H = (fv(z, 5), I);
  } else if (whichcode == 4) {
    struct node *d = I;
    if (0!=d) {
      I = d->left;
      fv(7, 4);
      I = d->right;
      fre(d);
      fv(1, 4);
    }
  }
  return 0;
}

int main(int argc, char **argv) {
  (void)argc;
  (void)argv;
  /* fprintf(stderr,"%p\n", F.left); */
  /* F.left=&F; */
  return fv(3, 0);
}
