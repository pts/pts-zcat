Flate FAQ
~~~~~~~~~
Everyhing you wanted to know about the Flate compression method.

compiled by Szabó Péter <pts@fazekas.hu> at Sat Jul 21 23:22:34 CEST 2001

1. What is Flate?
"""""""""""""""""
Flate is a generic data compression method that compresses a sequence of
arbitrary binary 8-bit bytes to a sequence of 8-bit bytes. Compression is
lossless, the original data can be retrieved from the compressed data
without a single bit of data loss.

Uncompression is unambiguous: the compressed data fully determines the
output of the uncompressor.

Compression is ambiguous: there are multiple ways and multiple algorithms
to compress -- compressors may operate any way they wish, but their output
must conform to the output file format (see FAQ answer 4). 

1a. What is Deflate?
""""""""""""""""""""
Deflate is the `compression' (or encoding, packing) direction of Flate.

Do not intermix Deflate with `DEFLATE', a compressed data format (see FAQ
answer 4.)

The `de-' prefix of Deflate is rather confusing. Despite of the `de-'
prefix, Deflate refers to compression, not uncompression. To avoid further
confusion, the word `decompression' is avoided in this FAQ, and the
term `uncompression' is used instead.

There is no standard way to do Deflate compression. Existing utilities use
their own, slightly unique algorithm.

1b. What is Inflate?
""""""""""""""""""""
Inflate is the `uncompression' (or decoding, unpacking) direction of Flate.

RFC 1951 describes the inner part of the Flate data comprression format, and
gives detailed emplanation about writing an Inflate uncompressor.

1c. Is Flate the same as LZW compression?
"""""""""""""""""""""""""""""""""""""""""
No, they are completely different, and they are unrelated to each other.

1d. Is Flate the same as ZIP compression?
"""""""""""""""""""""""""""""""""""""""""
ZIP is a file format, Flate is a compression method. They are not the same,
but they are closely related. See FAQ answer 3 and 4.

However, on should know that
Flate is sometimes errorneously referred as ZIP compression.

1e. Is Flate the same as RAR compression?
"""""""""""""""""""""""""""""""""""""""""
No, they are completely different, and they are unrelated to each other.

1f. Is Flate the same as LZ77 compression?
""""""""""""""""""""""""""""""""""""""""""
No, but they are fundamentally similar. See FAQ answer 2.

1g. Is Flate the same as LZSS compression?
""""""""""""""""""""""""""""""""""""""""""
No, but they are fundamentally similar. See FAQ answer 2.

1h. What are the most important characteristics of Flate?
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-- lossless
-- accepts any binary (8-bit) input
-- produces binary output
-- free to use, isn't covered by licenses and patents
-- the full exact specification (RFC 1951, RFC 1952, RFC 1950) is available
   for free
-- supported by many programs and utilities (see FAQ answer 3)
-- requires 10K of RAM for uncompression
-- uncompression code is smaller than
   40K in C source, PC assembly, SPARC assembly and Java bytecode
-- uncompression is fast (proportional to the input size)
-- memory and CPU time requirement of the compression depends on several
   factors, and can be adjusted to meet specific needs
-- available since 1993
-- many free source compressors and uncompressors exist (since 1993)
-- compares well to other methods (see FAQ answer 5)

2. How does Deflate work?
"""""""""""""""""""""""""
The deflation algorithm used by zip and gzip is a variation of LZ77
(Lempel-Ziv 1977,
[LZ77] Ziv J., Lempel A., "A Universal Algorithm for Sequential Data
Compression", IEEE Transactions on Information Theory", Vol. 23, No. 3,
pp. 337-343.)
It finds duplicated strings in
the input data.  The second occurrence of a string is replaced by a
pointer to the previous string, in the form of a pair (distance,
length).  Distances are limited to 32K bytes, and lengths are limited
to 258 bytes. When a string does not occur anywhere in the previous
32K bytes, it is emitted as a sequence of literal bytes.  (In this
description, 'string' must be taken as an arbitrary sequence of bytes,
and is not restricted to printable characters.)

Literals or match lengths are compressed with one Huffman tree, and
match distances are compressed with another tree. The trees are stored
in a compact form at the start of each block. The blocks can have any
size (except that the compressed data for one block must fit in
available memory). A block is terminated when zip determines that it
would be useful to start another block with fresh trees. (This is
somewhat similar to the UNIX `compress' utility.)

It is an interesting question how to find duplicated substrings efficiently.
The most common Deflate implementations (such as gzip and Info-Zip) find
duplicated strings using a hash table. All input strings of
length 3 are inserted in the hash table. A hash index is computed for
the next 3 bytes. If the hash chain for this index is not empty, all
strings in the chain are compared with the current input string, and
the longest match is selected. For more information, consult the
documentation of the implementations.

For the most verbose technical details, see RFC 1951.

3. What compressors and other programs support Flate compression?
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-- newer versions of PkZip (since around 1997) compresses data exclusively
   with the Deflate method. Its companion, PkUnzip can uncompress the ZIP
   files created by PkZip.

-- INFO-Zip (the free UNIX `zip' and `unzip' utilities), WinZIP, PkZip and
   JAR (Java Archiver) use the same file format, ZIP, which uses the Deflate
   method almost exclusively.

-- The free GNU gzip package (featuring the utilities `gzip', `gunzip' and
   `zcat') compresses using the Flate method, but is able to exctract some
   other, historical file formats for compatibility reasons.

-- The free PNG bitmap graphics file format supports Flate compression
   exclusively. All PNG handling programs, including the UNIX libpng library
   can load and save PNG files with Flate compression.

-- The TIFF bitmap graphics file format support Flate compression among
   others. Note that many older utilities cannot handle TIFF files with
   Flate compression, so a Flate-compressed TIFF is not portable. The UNIX
   libtiff library can load and save PNG files with Flate compression, and
   since most Linux graphics utilities (including Gimp and ImageMagick's
   `convert') use libtiff, so do they.

-- The free library zlib is devoted to Flate compression and uncompression.
   Many utilities and libraries (such as libpng and libtiff) use zlib for
   their Flate support.

-- zlib interfaces are available in many programming languages, including C,
   C++, Perl, PHP, Python, Ruby and Pike.

-- The bootable Linux kernel (vmlinuz, zImage, bzImage) is compressed using
   Flate compression to reduce disk space.

-- Java has its own Flate compression and uncompression implementation (from
   JDK 1.1, by default!), similar to, but not relying on zlib.

-- The PostScript language (officially from LanguageLevel 3, but also many
   earlier implementations, such as GNU Ghostscript 5.50)
   supports Flate compression and uncompression using the /FlateEncode and
   the /FlateDecode filters.

-- The PDF page page description format (from PDF 1.2, Acrobat software 3.0)
   supports Flate uncompression by the means of the /FlateDecode filter.

3b. What compressors and other programs do _not_ support Flate compression?
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-- the UNIX `compress' utility (which uses LZW in fact)

-- earlier versions of PkZip, TIFF, PostScript and PDF

-- the compressors RAR, ARJ, LHA, PkArc and Zoo

4. What file formats are associated with Flate?
"""""""""""""""""""""""""""""""""""""""""""""""
-- the `GZIP' file format (version 4.3, May 1996), as described in RFC 1952.
   Note that
   this is very similar, but not the same as the file format used by
   the GNU gzip utility. To avoid ambiguity, the RFC 1952 file format will
   be referred as `RFC 1952' in this FAQ. See FAQ answer 4a for more
   detail. The difference between the two formats is minor, so practically
   the `RFC 1952' format files can be manupulated with the `gzip' and
   `gunzip' utilities.

-- the file format used by GNU gzip (version 1.2.4, 18 Aug 1993). This will
   be referred the `gzip' format in this FAQ. See FAQ answer 4b for more
   detail. `gzip' format files can be manupulated with the `gzip' and
   `gunzip' utilities. PHP gzdeflate() and PHP gzinflate() is compatible
   with this.

-- The new ZIP file format, which is offers much more than just a simple
   Flate compression. Note that the JAR and ZIP file formats are the same.
   See the documentation of Info-ZIP for more details about the ZIP format.

-- the `ZLIB' file format (version 3.3, May 1996), as described in RFC
   1950. (The term is somewhat confusing because the library zlib can be
   instructed to load and save files in several formats, such as RFC 1952,
   gzip, ZIP and ZLIB.) PostScript and PDF support the `ZLIB' format
   (and _not_ the gzip format) with their /FlateDecode (uncompression) and
   /FlateEncode (compression) filters. PHP gzcompress() and gzuncompress()
   is compatible with this.

-- the `DEFLATE' compressed data format (version 1.3, May 1996), as
   described in RFC 1951. This is not a file format, only a data format --
   auxilary and checksum information etc. is missing from it.
   Data compressed this way is encapsuled in RFC 1952, gzip, ZIP, ZLIB and
   other file formats.

4b. How do the gzip/RFC 1952 file formats look like?
""""""""""""""""""""""""""""""""""""""""""""""""""""
(answer based on algorithm.doc by Jean-loup Gailly <jloup@chorus.fr>)

In the following explanation...
For the gzip file format, please assume that FHCRC is 0.
(For the RFC 1952
file format, please assume that GCONT and GENCR are 0, and the FEXTRA is
undocumented. For more details, see RFC 1952.)

gzip uses a simple structure. Numbers are in little
endian format, and bit 0 is the least significant bit.
A gzip file is a sequence of compressed members. Each member has the
following structure:

2 bytes  magic header  0x1f, 0x8b (\037 \213)  
1 byte   8. compression method, indicates Flate format.
1 byte   flags (FLG)
            bit 0 set: FTEXT: file probably ascii text
            bit 1 set: FHCRC (RFC 1952): 16-bit header CRC (HCRC) is present
                       GCONT (gzip): continuation of multi-part gzip file
            bit 2 set: FEXTRA: extra field present
            bit 3 set: FNAME: original file name present
            bit 4 set: FCOMMENT: file comment present
            bit 5 set: (RFC 1952): reserved, zero
                       GENCR (gzip): file is encrypted
            bit 6:     reserved, zero
            bit 7:     reserved, zero
4 bytes  file modification time in UNIX timestamp format, measured in
         seconds; zero is 1 Jan 1970 00:00:00 UTC.
1 byte   extra flags (depend on compression method), for Flate:
         XFL = 0 - compressor used normal compression
         XFL = 2 - compressor used maximum compression, slowest algorithm
         XFL = 4 - compressor used fastest algorithm
1 byte   operating system/file system on which compression took place:
           0 - FAT filesystem (MS-DOS, OS/2, NT/Win32)
           1 - Amiga
           2 - VMS (or OpenVMS)
           3 - Unix
           4 - VM/CMS
           5 - Atari TOS
           6 - HPFS filesystem (OS/2, NT)
           7 - Macintosh
           8 - Z-System
           9 - CP/M
          10 - TOPS-20
          11 - NTFS filesystem (NT)
          12 - QDOS
          13 - Acorn RISCOS
         255 - unknown
2? bytes optional part number, only if GCONT=1
2? bytes optional extra field length, only if FEXTRA=1
? bytes  optional extra field, only if FEXTRA=1
? bytes  optional original file name, zero terminated, only if FNAME=1
? bytes  optional file comment, zero terminated, only if FCOMMENT=1
12 bytes optional encryption header, only if GENCR=1
? bytes  compressed data, in Flate format, see RFC 1951
4 bytes  mandatory CRC32, see RFC 1952
4 bytes  uncompressed input file size, modulo 2^32

The format was designed to allow single pass compression without any
backwards seek, and without a priori knowledge of the uncompressed
input size or the available size on the output media. If input does
not come from a regular disk file, the file modification time is set
to the time at which compression started.

The time stamp is useful mainly when one gzip file is transferred over
a network. In this case it would not help to keep ownership
attributes. In the local case, the ownership attributes are preserved
by gzip when compressing/uncompressing the file. A time stamp of zero
is ignored.

Bit 0 in the flags is only an optional indication, which can be set by
a small lookahead in the input data. In case of doubt, the flag is
cleared indicating binary data. For systems which have different
file formats for ascii text and binary data, the uncompressor can
use the flag to choose the appropriate format.

The extra field, if present, must consist of one or more subfields,
each with the following format:

  subfield id   : 2 bytes
  subfield size : 2 bytes  (little-endian format)
  subfield data

The subfield id can consist of two letters with some mnemonic value.
Please send any such id to jloup@chorus.fr. Ids with a zero second
byte are reserved for future use. The following ids are defined:

  Ap (0x41, 0x70) : Apollo file type information

The subfield size is the size of the subfield data and does not
include the id and the size itself. The field 'extra field length' is
the total size of the extra field, including subfield ids and sizes.

It must be possible to detect the end of the compressed data with any
compression format, regardless of the actual size of the compressed
data. If the compressed data cannot fit in one file (in particular for
diskettes), each part starts with a header as described above, but
only the last part has the crc32 and uncompressed size. A uncompressor
may prompt for additional data for multipart compressed files. It is
desirable but not mandatory that multiple parts be extractable
independently so that partial data can be recovered if one of the
parts is damaged. This is possible only if no compression state is
kept from one part to the other. The compression-type dependent flags
can indicate this.

If the file being compressed is on a file system with case insensitive
names, the original name field must be forced to lower case. There is
no original file name if the data was compressed from standard input.

Compression is always performed, even if the compressed file is
slightly larger than the original. The worst case expansion is
a few bytes for the gzip file header, plus 5 bytes every 32K block,
or an expansion ratio of 0.015% for large files. Note that the actual
number of used disk blocks almost never increases.

The encryption is that of zip 1.9. For the encryption check, the
last byte of the decoded encryption header must be zero. The time
stamp of an encrypted file might be set to zero to avoid giving a clue
about the construction of the random header.

4c. How does the ZLIB file format look like?
""""""""""""""""""""""""""""""""""""""""""""
See RFC 1950 for more detail.

Only for the Flate compression, it starts with a 16-bit word (MSB first):

	0x7801 fastest compression
	0x785e fast compression
	0x789c default compression
	0x78da maximum compression

The compression method used is only information, doesn't affect
uncompression.

After that comes the data in Flate-compressed format (see RFC 1951).

After that comes the ADLER32 checksum of the _uncompressed_ file, in 4
bytes (see RFC 1950 for more detail). 

4d. How to convert between Flate file formats?
""""""""""""""""""""""""""""""""""""""""""""""
Only gzip, RFC 1952, DEFLATE (RFC 1951) and ZLIB (RFC 1950) will be
discussed.

First, remove the header:

-- remove 10 or more bytes for gzip and RFC 1952, see FAQ answer 4b
-- don't remove anything for DEFLATE (RFC 1951)
-- remove 2 bytes for ZLIB (RFC 1950)

Then, remove the trailer from the end:

-- remove 8 bytes for gzip and RFC 1952, see FAQ answer 4b
-- don't remove anything for DEFLATE (RFC 1951)
-- remove 4 bytes for ZLIB (RFC 1950)

Now, the bytes remaining constitute a compressed tata in DEFLATE format. If
that was the target file format, stop. Otherwise, uncompress the data in
memory, and calculate the CRC:

-- for gzip and RFC 1952, calculate CRC32, as described in RFC 1952
-- for ZLIB, calculate ADLER32, as defined in RFC 1950

If uncompression would take much time, you may omit it, fake something
for the CRC and ignore CRC errors reported by uncompressors.

Add the appropriate headers and trailers:

-- 8 bytes for gzip and RFC 1952, see FAQ answer 4b
-- 4 bytes for ZLIB, see FAQ answer 4c

5. How does Flate compare to similar compression methods?
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Respects of comparison:

-- compressed file size
-- compression time requirement
-- compression memory requirement
-- uncompression time requirement
-- uncompression memory requirement

The most important respect of comparison is compressed file size. A rough,
emprical comparison follows, using human language text, program source code,
compiled program binaries and images with few colors for input.

Flate is much better than:

-- most run-length encoding schemes
-- CCITT Fax encoding

Flate is better than:

-- LZW (UNIX `compress')
-- LHA (LZH)

Flate is slightly worse than:

-- RAR
-- ACE
-- bzip2
-- ARJ
-- rkive

As a worst case (for random data), Deflate expands its output with a factor
of 1.003. (The worst case for LZW is 1.125, which can grow to 1.5 for some
implementations.)

6. What else should I read?
"""""""""""""""""""""""""""
...

RFC 1950
RFC 1951
RFC 1952

7a. Why cannot gunzip uncompress the output of PostScript /FlateEncode?
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
These formats are similar, but not identical. See FAQ answer 4.

7b. Why cannot PostScript /FlateDeocde uncompress the output of gzip?
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
These formats are similar, but not identical. See FAQ answer 4.

7c. I want to compress entire files in PHP. What functions should I use?
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
For PostScript /Flate??Code compatibility, use gzcompress() and
gzuncompress().

For gzip compatibility, use gzdeflate() and gzinflate().

Try to avoid gzopen() etc. unless you deal with large files that don't fit
into memory as a whole.

__END__
